/**
 * Servicio para parsear informaci√≥n de carreras
 */
export class CareerParsingService {
  /**
   * Funci√≥n principal para parsear materias del contenido del endpoint
   * @param {string} contenido - Contenido HTML/texto del endpoint
   * @param {object} carreraInfo - Informaci√≥n de la carrera
   * @returns {string} - Resultado formateado
   */
  parsearMaterias(contenido, carreraInfo) {
    if (!contenido) return null;

    try {
      let resultado = `üìö **MATERIAS DE ${carreraInfo.nombre.toUpperCase()} - UNNOBA**\n\n`;

      // Normalizar el texto
      const textoCompleto = contenido.replace(/\s+/g, " ").trim();

      // Buscar la secci√≥n del plan de estudios
      let inicioSeccion = this.encontrarInicioSeccion(textoCompleto);
      let finSeccion = this.encontrarFinSeccion(textoCompleto);

      const seccionPlan = textoCompleto.substring(inicioSeccion, finSeccion);

      // Detectar a√±os usando un patr√≥n m√°s preciso
      const a√±os = this.detectarA√±os(seccionPlan);

      if (a√±os.length === 0) {
        // Si no encontramos a√±os, usar fallback
        return this.parsearMateriasSimple(contenido, carreraInfo);
      }

      // Procesar cada a√±o
      for (let i = 0; i < a√±os.length; i++) {
        const a√±oActual = a√±os[i];
        const proximoA√±o = a√±os[i + 1];

        // Extraer texto de este a√±o
        const inicioA√±o = a√±oActual.posicion;
        const finA√±o = proximoA√±o ? proximoA√±o.posicion : seccionPlan.length;
        const textoA√±o = seccionPlan.substring(inicioA√±o, finA√±o);

        resultado += `üéì **${a√±oActual.numero}¬∫ A√±o**\n\n`;

        // Detectar cuatrimestres
        const cuatrimestres = this.detectarCuatrimestres(textoA√±o);

        // Si no hay cuatrimestres, procesar todo como un bloque
        if (cuatrimestres.length === 0) {
          const materias = this.extraerMateriasTexto(textoA√±o);
          if (materias.length > 0) {
            resultado += `üìã **Materias del a√±o:**\n`;
            materias.forEach((materia) => {
              resultado += `‚Ä¢ ${materia}\n`;
            });
            resultado += "\n";
          }
          continue;
        }

        // Procesar cada cuatrimestre
        resultado += this.procesarCuatrimestres(cuatrimestres, textoA√±o);
      }

      // Agregar enlaces espec√≠ficos
      resultado += this.agregarEnlacesOficiales(carreraInfo);

      return resultado;
    } catch (error) {
      console.error("Error parseando materias:", error);
      return this.parsearMateriasSimple(contenido, carreraInfo);
    }
  }

  /**
   * Encuentra el inicio de la secci√≥n del plan de estudios
   * @param {string} textoCompleto - Texto completo a analizar
   * @returns {number} - Posici√≥n de inicio
   */
  encontrarInicioSeccion(textoCompleto) {
    let inicioSeccion = textoCompleto.indexOf("Plan-Versi√≥n");
    if (inicioSeccion === -1) {
      inicioSeccion = textoCompleto.indexOf("Planes de Estudio");
    }
    if (inicioSeccion === -1) {
      inicioSeccion = 0;
    }
    return inicioSeccion;
  }

  /**
   * Encuentra el final de la secci√≥n del plan de estudios
   * @param {string} textoCompleto - Texto completo a analizar
   * @returns {number} - Posici√≥n de fin
   */
  encontrarFinSeccion(textoCompleto) {
    let finSeccion = textoCompleto.indexOf("Pr√°ctica Profesional Supervisada");
    if (finSeccion !== -1) {
      finSeccion = textoCompleto.indexOf(")", finSeccion) + 1;
    } else {
      finSeccion = textoCompleto.length;
    }
    return finSeccion;
  }

  /**
   * Detecta los a√±os en el plan de estudios
   * @param {string} seccionPlan - Secci√≥n del plan a analizar
   * @returns {Array} - Array de objetos con informaci√≥n de a√±os
   */
  detectarA√±os(seccionPlan) {
    const regexA√±o = /(\d+)¬∫\s+A√±o/g;
    const a√±os = [];
    let matchA√±o;

    while ((matchA√±o = regexA√±o.exec(seccionPlan)) !== null) {
      a√±os.push({
        numero: matchA√±o[1],
        texto: matchA√±o[0],
        posicion: matchA√±o.index,
      });
    }

    return a√±os;
  }

  /**
   * Detecta los cuatrimestres en un a√±o
   * @param {string} textoA√±o - Texto del a√±o a analizar
   * @returns {Array} - Array de objetos con informaci√≥n de cuatrimestres
   */
  detectarCuatrimestres(textoA√±o) {
    const regexCuatrimestre = /(1er|2do)\s+Cuatrimestre/g;
    const cuatrimestres = [];
    let matchCuatrimestre;

    while ((matchCuatrimestre = regexCuatrimestre.exec(textoA√±o)) !== null) {
      cuatrimestres.push({
        texto: matchCuatrimestre[0],
        posicion: matchCuatrimestre.index,
      });
    }

    return cuatrimestres;
  }

  /**
   * Procesa los cuatrimestres de un a√±o
   * @param {Array} cuatrimestres - Array de cuatrimestres
   * @param {string} textoA√±o - Texto completo del a√±o
   * @returns {string} - Resultado formateado
   */
  procesarCuatrimestres(cuatrimestres, textoA√±o) {
    let resultado = "";

    for (let j = 0; j < cuatrimestres.length; j++) {
      const cuatrimestreActual = cuatrimestres[j];
      const proximoCuatrimestre = cuatrimestres[j + 1];

      resultado += `üìã **${cuatrimestreActual.texto}:**\n`;

      // Extraer texto de este cuatrimestre
      const inicioCuatrimestre =
        cuatrimestreActual.posicion + cuatrimestreActual.texto.length;
      const finCuatrimestre = proximoCuatrimestre
        ? proximoCuatrimestre.posicion
        : textoA√±o.length;
      let textoCuatrimestre = textoA√±o.substring(
        inicioCuatrimestre,
        finCuatrimestre
      );

      // Buscar materias en este cuatrimestre
      const materias = this.extraerMateriasTexto(textoCuatrimestre);

      if (materias.length > 0) {
        materias.forEach((materia) => {
          resultado += `‚Ä¢ ${materia}\n`;
        });
      } else {
        resultado += `‚Ä¢ (Consultar plan de estudios oficial)\n`;
      }

      resultado += "\n";
    }

    return resultado;
  }

  /**
   * Extrae materias del texto usando m√∫ltiples estrategias
   * @param {string} texto - Texto a analizar
   * @returns {Array} - Array de nombres de materias
   */
  extraerMateriasTexto(texto) {
    const materias = new Set();

    // Estrategia 1: Buscar patrones t√≠picos de materias
    const patronesMateria = [
      /([A-Z√Å√â√ç√ì√ö√ë√ú][a-z√°√©√≠√≥√∫√±√º\s]+(?:I{1,3}|IV|V|VI{0,3})?)\s*(?:\([^)]*\))?/g,
      /([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*(?:\s+[IVX]+)?)/g,
    ];

    patronesMateria.forEach((patron) => {
      let match;
      while ((match = patron.exec(texto)) !== null) {
        const materia = match[1].trim();
        if (this.esNombreMateriaValido(materia)) {
          materias.add(materia);
        }
      }
    });

    // Estrategia 2: Buscar l√≠neas que parecen nombres de materias
    const lineas = texto.split("\n");
    lineas.forEach((linea) => {
      const lineaLimpia = linea.trim();
      if (this.esNombreMateriaValido(lineaLimpia)) {
        materias.add(lineaLimpia);
      }
    });

    return Array.from(materias).slice(0, 15); // Limitar a 15 materias por cuatrimestre
  }

  /**
   * Valida si un string es un nombre de materia v√°lido
   * @param {string} texto - Texto a validar
   * @returns {boolean} - True si es v√°lido
   */
  esNombreMateriaValido(texto) {
    if (!texto || texto.length < 3 || texto.length > 100) return false;

    // Filtrar texto que no parece nombre de materia
    const palabrasExcluidas = [
      "plan",
      "version",
      "a√±o",
      "cuatrimestre",
      "horas",
      "creditos",
      "practica",
      "profesional",
      "supervisada",
      "trabajo",
      "final",
      "total",
      "carga",
      "horaria",
      "requisitos",
      "correlativas",
    ];

    const textoLower = texto.toLowerCase();
    if (palabrasExcluidas.some((palabra) => textoLower.includes(palabra))) {
      return false;
    }

    // Debe contener al menos una letra
    if (!/[a-z√°√©√≠√≥√∫√±√º]/i.test(texto)) return false;

    // No debe ser solo n√∫meros o s√≠mbolos
    if (/^[\d\s\-().,]+$/.test(texto)) return false;

    return true;
  }

  /**
   * Parseo simple como fallback
   * @param {string} contenido - Contenido a parsear
   * @param {object} carreraInfo - Informaci√≥n de la carrera
   * @returns {string} - Resultado formateado
   */
  parsearMateriasSimple(contenido, carreraInfo) {
    let resultado = `üìö **MATERIAS DE ${carreraInfo.nombre.toUpperCase()} - UNNOBA**\n\n`;

    resultado += "‚ö†Ô∏è **Informaci√≥n parcial disponible**\n\n";
    resultado +=
      "Para obtener la informaci√≥n completa y actualizada sobre las materias de esta carrera, ";
    resultado +=
      "te recomendamos consultar directamente el plan de estudios oficial.\n\n";

    resultado += this.agregarEnlacesOficiales(carreraInfo);

    return resultado;
  }

  /**
   * Agrega enlaces oficiales al resultado
   * @param {object} carreraInfo - Informaci√≥n de la carrera
   * @returns {string} - Enlaces formateados
   */
  agregarEnlacesOficiales(carreraInfo) {
    return (
      `üîó **Enlaces oficiales:**\n` +
      `‚Ä¢ **Plan de estudios oficial:** ${carreraInfo.enlace}\n` +
      `‚Ä¢ **Sitio UNNOBA:** https://unnoba.edu.ar/\n\n` +
      `üí° **Para informaci√≥n detallada y actualizada, consult√° el plan de estudios oficial.**`
    );
  }
}

// Instancia singleton
export const careerParsingService = new CareerParsingService();
